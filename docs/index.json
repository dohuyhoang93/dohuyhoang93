
[{"content":"\rBối cảnh và mục tiêu #\rDev - Rust - Python - AGI research\nNguồn lực #\rONLY MYSELF\n","date":"4 July 2025","externalUrl":null,"permalink":"dohuyhoang93.github.io/","section":"","summary":"","title":"","type":"page"},{"content":"","date":"4 July 2025","externalUrl":null,"permalink":"dohuyhoang93.github.io/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"\r1. Tóm tắt cho Lãnh đạo (Executive Summary) #\rMục tiêu Year 1:\nGiảm lỗi sản phẩm: Giảm tỷ lệ phế phẩm từ 3% xuống 2.5% Nâng cao hiệu suất máy (OEE): Tăng từ 65% lên 70% trong 6 tháng Minh họa:\nChỉ số Hiện tại Mục tiêu Ghi chú Hiệu suất máy (OEE) 65% 70% OEE = Tỷ lệ thời gian máy chạy tốt trên tổng thời gian vận hành Tỷ lệ phế phẩm 3% 2.5% Phần trăm sản phẩm lỗi trên tổng sản lượng Nguồn số liệu: Dashboard Superset (6 tháng gần nhất)\nGiá trị dự kiến:\nTiết kiệm ~500 triệu VND/năm nhờ giảm lượng hàng lỗi Giảm 200 giờ dừng máy/năm (tương đương giảm 5% tổng downtime) Ngân sách: Dưới 1 tỷ VND • Nhân lực: 1 người đảm nhiệm (FTE)\n2. Bối cảnh \u0026amp; Vấn đề thực tế #\rFujikin Vietnam: Sản xuất các van và thiết bị khí siêu sạch. Dữ liệu sẵn có: Hệ thống ERP (quản lý đơn hàng), SPC (kiểm soát chất lượng), IoT (ghi lại khi máy CNC dừng/chạy). Các khó khăn hiện tại:\nLỗi sản phẩm cao: 3% sản lượng bị loại bỏ sau kiểm tra. Hiệu suất máy thấp: Máy chỉ hoạt động hiệu quả 65% thời gian. Quy trình quyết định chủ yếu dựa kinh nghiệm, không có cảnh báo sớm khi máy có dấu hiệu bất thường. Tầm nhìn dài hạn (3+ năm):\nGiảm lỗi \u0026amp; chi phí sản xuất Tối ưu quản lý tồn kho Phân tích dữ liệu khách hàng Bảo trì dự đoán nâng cao với cảm biến bổ sung (nhiệt độ, độ rung) 3. Giải pháp Đề xuất (Mỗi bước có ví dụ minh họa) #\rChiến lược “Một lát cắt hoàn chỉnh” #\rXây một luồng hoàn chỉnh từ thu thập dữ liệu → làm sạch → phân tích → cảnh báo cho một bài toán mẫu.\nPhase 0: Xác thực dữ liệu (2 ngày) #\rNgắn gọn: Thử tải file mẫu từ mỗi nguồn (ERP, SPC, IoT). Ví dụ: pd.read_csv('erp_sample.csv').head() và chụp màn hình kết quả. Mục tiêu: Đảm bảo lấy dữ liệu thành công và định dạng phù hợp. Phase 1: Tạo đường ống dữ liệu cơ bản (1 tuần) #\rNgắn gọn: Viết script gom 3 file SPC + 1 file ERP vào thư mục chung. Ví dụ: python process_new_data.py --input spc1.csv spc2.csv spc3.csv erp.csv --output staging/ Mục tiêu: Chạy script trong \u0026lt; 5 phút trên máy tính cá nhân. Phase 2: Phân tích \u0026amp; làm rõ thông tin (2–3 tuần) #\rNgắn gọn: Phân tích 2 chỉ số chính: OEE và tần suất dừng máy bất thường. Ví dụ: Vẽ biểu đồ line chart cho số lần máy dừng theo ngày, tuning threshold để precision ≥ 70%, recall ≥ 50%. Mục tiêu: Xác nhận với QC supervisor, ghi lại tên \u0026amp; ngày xác thực. Phase 3: Sprint Thử nghiệm Đầu tiên (PoC Sprint) (1–2 tuần) #\rNgắn gọn: Tạo ứng dụng web nhỏ (Streamlit) cho nhập dữ liệu và cảnh báo “Nguy cơ lỗi cao”. Ví dụ: Giao diện 2 ô nhập (thời gian dừng, số lần dừng) → hiển thị “Nguy cơ lỗi: CAO”. Mục tiêu: Ít nhất 1 nhân viên tự khởi chạy app và phản hồi mà không cần nhắc. Lưu ý: Sau PoC Sprint (đến 15/08/2025), sẽ bước vào Phase 4: Tối ưu \u0026amp; Mở rộng (3–6 tháng) để cải thiện mô hình và tích hợp sâu hơn.\n4. Sơ đồ hoạt động \u0026amp; Vòng phản hồi #\rflowchart LR\rERP[Đơn hàng (ERP)] --\u0026gt; Staging[Thư mục gom dữ liệu]\rSPC[QC (SPC)] --\u0026gt; Staging\rIoT[Cảm biến dừng/chạy] --\u0026gt; Staging\rStaging --\u0026gt; ScriptX[Chạy script gom dữ liệu]\rScriptX --\u0026gt; Analysis[Phân tích \u0026amp; tạo mô hình]\rAnalysis --\u0026gt; App[Ứng dụng Web]\rApp --\u0026gt; User[Nhân viên vận hành]\rUser -- Gửi phản hồi --\u0026gt; Feedback[Lưu phản hồi]\rFeedback -- Cập nhật dữ liệu --\u0026gt; Analysis Mỗi lượt sử dụng, nhân viên phản hồi (đúng/sai) giúp cải thiện mô hình.\n5. Lộ trình chi tiết (PoC Sprint + tương lai) #\rGiai đoạn Thời gian Công việc chính Kết quả mong đợi PoC Sprint (Sprint 1) 1–15 Aug 2025 Phases 0–3 hoàn thành PoC app hoạt động + phản hồi đầu tiên Phase 4: Tối ưu \u0026amp; Mở rộng Sep 2025 – Feb 2026 Tinh chỉnh mô hình, tích hợp QC sâu Mô hình chính xác hơn \u0026amp; dùng rộng 6. Rủi ro \u0026amp; Cách khắc phục (Tóm tắt) #\rRủi ro Giải pháp nhanh File lỗi hoặc định dạng Script test định dạng 1 lệnh Script chạy chậm Chạy riêng lẻ hoặc batch nhỏ Cảnh báo không chính xác Điều chỉnh threshold cảnh báo Nhân viên không dùng Nhắc nhở tự động + khen thưởng đơn giản Xem chi tiết Ownership \u0026amp; Plan B tại phần Appendix\n7. Hướng dẫn nhanh (3 bước) #\rChạy drill script:\npython drill.py --source spc.csv,erp.csv,log.csv Chạy gom dữ liệu:\npython process_new_data.py --input ... --output staging/ Chạy Web App:\nstreamlit run app.py 8. Các câu hỏi hay gặp (Q\u0026amp;A) #\rTại sao phải làm bây giờ?\nMáy dừng nhiều, OEE chỉ 65% (tương đương 200h downtime/năm), ảnh hưởng lớn đến chi phí. Chi phí đầu tư?\nKhông cần phần cứng/phần mềm mới. Chi phí chính là 1 FTE trong PoC Sprint, đây là khoản đầu tư phát triển năng lực nội bộ. Ai phụ trách tiếp theo?\nTài liệu chi tiết + mã nguồn sẵn có. Cần 1 nhân sự Python cơ bản và được đào tạo về QC của Fujikin (~2 tuần) để tiếp quản. Phụ Lục (Appendix) - Chi Tiết Kế Hoạch \u0026amp; Quản Lý Rủi Ro #\rĐây là phần bổ sung cho tài liệu chính. Mục đích là cung cấp thông tin sâu hơn cho những ai quan tâm, chứng minh dự án đã được lên kế hoạch cẩn trọng.\nA1. Giải thích các Thuật ngữ chính #\rThuật ngữ Diễn giải cho người không chuyên Ví dụ thực tế OEE (Overall Equipment Effectiveness) Chỉ số đo lường hiệu suất tổng thể của một máy, tính bằng % Một máy có OEE 65% nghĩa là trong 100 giờ bật máy, chỉ có 65 giờ thực sự tạo ra sản phẩm chất lượng tốt. ETL (Extract, Transform, Load) Quy trình 3 bước để gom dữ liệu từ nhiều nguồn, làm sạch và đưa vào một nơi lưu trữ chung. Giống như việc thu thập báo cáo từ nhiều phòng ban (Excel, Word), chuẩn hóa chúng về một mẫu chung, rồi lưu vào một thư mục duy nhất. Machine Learning (ML) Model Một chương trình máy tính \u0026ldquo;học\u0026rdquo; từ dữ liệu cũ để đưa ra dự đoán cho dữ liệu mới. Dựa vào lịch sử thời tiết, nó có thể dự đoán ngày mai mưa hay nắng. Dự án này sẽ dựa vào lịch sử sản xuất để dự đoán nguy cơ lỗi. Streamlit App Một công cụ giúp tạo ra một trang web đơn giản để tương tác với mô hình ML mà không cần kỹ năng lập trình web phức tạp. Một giao diện web nơi nhân viên có thể nhập vài thông số và nhận lại kết quả \u0026ldquo;An toàn\u0026rdquo; hay \u0026ldquo;Cảnh báo\u0026rdquo;. Threshold (Ngưỡng cảnh báo) Một con số giới hạn để quyết định khi nào cần đưa ra cảnh báo. Nếu đặt ngưỡng là \u0026ldquo;5 lần dừng máy/ngày\u0026rdquo;, hệ thống sẽ chỉ cảnh báo khi số lần dừng máy vượt qua 5. A2. Chi tiết Kế hoạch Quản lý Rủi ro #\rBảng này phân tích sâu hơn các rủi ro đã tóm tắt ở phần 6, chỉ rõ người chịu trách nhiệm và phương án dự phòng.\nRủi ro Mức độ Người chịu trách nhiệm (Ownership) Phương án xử lý (Mitigation) Phương án B (Plan B) Dữ liệu không nhất quán (File lỗi, định dạng sai) Cao Team IT \u0026amp; Dự án (Bạn) Viết script tự động kiểm tra định dạng file trước khi xử lý. Gửi cảnh báo ngay cho IT nếu có lỗi. Team IT hỗ trợ xuất dữ liệu thủ công hàng ngày cho đến khi hệ thống tự động ổn định. Hiệu năng hệ thống chậm (Script chạy quá lâu khi dữ liệu lớn) Trung bình Dự án (Bạn) Tối ưu hóa mã nguồn, xử lý dữ liệu theo từng lô nhỏ (batch processing) thay vì xử lý tất cả cùng lúc. Lên lịch chạy script vào ban đêm hoặc giờ thấp điểm để không ảnh hưởng đến công việc ban ngày. Mô hình dự đoán không chính xác (Cảnh báo sai quá nhiều) Cao Dự án \u0026amp; Team QC Tổ chức các buổi họp với chuyên gia QC để tinh chỉnh lại \u0026ldquo;luật\u0026rdquo; dự đoán. Điều chỉnh ngưỡng cảnh báo để cân bằng giữa cảnh báo đúng và cảnh báo sai. Quay lại bước phân tích dữ liệu, tìm thêm các yếu tố mới có thể ảnh hưởng đến chất lượng sản phẩm. Nhân viên không sử dụng ứng dụng (App bị bỏ quên) Cao Dự án \u0026amp; Người dùng thử (Early Adopters) 1. WIIFM: Chỉ rõ lợi ích (\u0026ldquo;Giúp anh/chị phát hiện lỗi sớm hơn, giảm báo cáo thủ công\u0026rdquo;).\n2. Giao tiếp: Gửi nhắc nhở tự động, tạo form phản hồi 3 câu hỏi.\n3. Khen thưởng: Đề xuất khen thưởng cho nhân viên tích cực đóng góp ý kiến. Tổ chức các buổi đào tạo lại, phỏng vấn sâu người dùng để tìm ra rào cản thực sự và đơn giản hóa ứng dụng hơn nữa. Phụ thuộc vào một cá nhân (Key Person) Cao Dự án \u0026amp; Trưởng bộ phận 1. Tài liệu hóa: Viết tài liệu hướng dẫn chi tiết từng bước.\n2. Quay video: Ghi lại video màn hình các thao tác chính.\n3. Đào tạo \u0026ldquo;Super User\u0026rdquo;: Đào tạo 1-2 nhân viên khác để họ có thể thực hiện các tác vụ cơ bản. Chuẩn bị sẵn một nhân sự dự phòng (đã được giới thiệu sơ bộ về dự án) để có thể tiếp quản trong trường hợp khẩn cấp. ","date":"4 July 2025","externalUrl":null,"permalink":"dohuyhoang93.github.io/posts/productdocument/","section":"Posts","summary":"","title":"Product Document - Tài liệu kế hoạch triển khai dự án ML Fujikin ","type":"posts"},{"content":"\rBối cảnh và mục tiêu #\rCông ty Fujikin (Nhật Bản, có chi nhánh tại Việt Nam) chuyên sản xuất các sản phẩm siêu sạch cho công nghiệp bán dẫn, y tế, hàng không. Hiện Fujikin mong muốn áp dụng ML vào sản xuất với mục tiêu chính: giảm lỗi sản phẩm, hạ chi phí sản xuất, tối ưu hóa tồn kho và nắm bắt xu hướng dịch chuyển nhu cầu khách hàng. Theo xu hướng chung của ngành, AI/ML đã được chứng minh giúp nâng cao năng suất và chất lượng, đồng thời giảm chi phí vận hành. Ví dụ, ML cho phép dự báo thiết bị hư hỏng từ dữ liệu cảm biến, giúp lên lịch bảo trì chính xác hơn. Như vậy, kế hoạch này sẽ định hướng vào các ứng dụng như phát hiện dị thường (phế phẩm), dự báo nhu cầu và tự động hóa phân tích dữ liệu khách hàng để đạt các mục tiêu đề ra.\nNguồn lực và dữ liệu hiện có #\rĐội triển khai chỉ có một nhân sự nội bộ (tôi) với nền tảng Python nhưng chưa có kinh nghiệm chuyên sâu về ML. Ngân sách dưới 1 tỷ VND, không thể thuê chuyên gia ngoài. Dữ liệu sẵn có gồm:\nDữ liệu IoT từ máy CNC (chỉ bao gồm nhật kí về thời điểm máy dừng/chạy - nguyên nhân. Ngoài ra không có thông tin gì); Dữ liệu ERP Ksystem về đơn hàng, tồn kho, sản lượng sản xuất; Dữ liệu chất lượng QC (kết quả kiểm tra sản phẩm); Email và tệp văn phòng lưu trên SMB chứa thông tin giao dịch và phản hồi khách hàng. ML có thể tận dụng dữ liệu trạng thái máy CNC để dự báo sự cố hoặc cần bảo trì (ví dụ ML phân tích các mẫu trạng thái để dự đoán thiết bị hỏng).\nTuy nhiên, dữ liệu đang ở nhiều hệ thống khác nhau (sensor logs, cơ sở dữ liệu ERP, file phi cấu trúc) và cần được tổng hợp, làm sạch trước khi phân tích.\nCác thách thức chính #\rChất lượng và tích hợp dữ liệu: #\rDữ liệu hiện có đa dạng về dạng thức và chất lượng:\nDữ liệu IoT CNC có thể thiếu/gian lận, Dữ liệu sản xuất ERP do nhân công nhập tay có thể thiếu, sai, không đầy đủ, không theo thời gian thực, Dữ liệu lịch sử khách hàng rời rạc, Dữ liệu QC chưa gán nhãn đầy đủ. AI/ML đòi hỏi lượng lớn dữ liệu chất lượng cao; nếu dữ liệu nhiễu hoặc không đầy đủ, kết quả sẽ không tin cậy. Cần xây dựng quy trình thu thập, hợp nhất và làm sạch dữ liệu (ETL) tỉ mỉ.\nThiếu chuyên gia và nhân lực: #\rCông ty không có chuyên gia AI, chỉ có một lập trình viên Python. Việc học ML từ đầu và phát triển mô hình mất thời gian và dễ gặp sai sót. Theo khảo sát, một trong những thách thức lớn là thiếu nguồn lực có kinh nghiệm phát triển ML. Cần đầu tư thời gian tự học hoặc tận dụng các giải pháp tự động (AutoML, thư viện mẫu) để bù đắp.\nHệ thống cũ và tích hợp: #\rHệ thống Ksystem, IoT và hạ tầng IT hiện tại có thể không đồng nhất hoặc quá cũ để tích hợp trực tiếp với ứng dụng AI. Vấn đề kỹ thuật tích hợp (legacy system) cần được giải quyết để ML truy cập dữ liệu và phản hồi vào hệ thống điều khiển sản xuất. Cần xác định các giao tiếp API hoặc xuất dữ liệu định kỳ, đồng thời thử nghiệm quy trình tích hợp từng bước.\nQuy mô dự án: #\rNên bắt đầu từ các mục tiêu kinh doanh cụ thể phù hợp với kỳ vọng của ban giám đốc:\nGiảm lỗi Giảm chi phí Dự án cần ưu tiên từng ứng dụng cụ thể, không làm quá nhiều cùng lúc. Ví dụ, nên bắt đầu với một use-case đơn giản (chẳng hạn dự báo hỏng hóc máy CNC hoặc dự báo tồn kho một mặt hàng, dự báo điểm sẽ phát sinh lỗi, lập lịch chạy máy CNC) để có kết quả nhanh. Làm quá nhiều mục tiêu đồng thời sẽ khó duy trì, nên áp dụng theo giai đoạn (phased approach) để liên tục học hỏi và cải thiện.\nGiải pháp và công cụ đề xuất #\rĐề xuất ưu tiên sử dụng các công cụ mã nguồn mở, miễn phí hoặc chi phí thấp, phù hợp với kỹ năng Python hiện tại.\nNền tảng phát triển: Sử dụng Python và môi trường Jupyter Notebook/VSCode để phát triển. Các thư viện phân tích dữ liệu như Pandas, NumPy và thư viện ML như scikit-learn, XGBoost (cho học máy cổ điển) hay TensorFlow/PyTorch (cho học sâu nếu cần) đều miễn phí và phổ biến. Git/GitHub để quản lý mã nguồn. Google Colab hoặc Kaggle notebook có thể cung cấp GPU miễn phí để đào tạo nhanh mô hình.\nXử lý dữ liệu IoT và ETL: Có thể dùng Node-RED (open-source) để thu thập và tiền xử lý dữ liệu IoT từ máy CNC. Sử dụng cơ sở dữ liệu miễn phí như InfluxDB hay PostgreSQL để lưu trữ dữ liệu thời gian thực. Grafana hoặc Apache Superset có thể xây dựng dashboard trực quan cho dữ liệu sản xuất.\nDữ liệu ERP/QC: Dùng Python (SQLAlchemy, Pandas) để kết nối và trích xuất từ cơ sở dữ liệu Ksystem. OCR hoặc NLP (spaCy, Hugging Face Transformers) miễn phí để trích xuất thông tin nếu file văn bản cần phân tích. Apache NiFi hoặc Airflow (open-source) để tự động hóa luồng dữ liệu nếu cần.\nTriển khai và phần cứng: Máy tính hiện tại có thể dùng ban đầu; nếu cần tính toán ML phức tạp, một máy tính để bàn với CPU mạnh hoặc card đồ họa tầm trung (Ví dụ: GPU NVIDIA RTX 3060, ~20 triệu VND) có thể mua với ngân sách dưới 1 tỉ. Ngoài ra, Google Colab Pro (chi phí thấp) có thể cung cấp GPU mạnh. Tất cả phần mềm trên đều sử dụng mã nguồn mở/miễn phí, phù hợp với hạn chế chi phí.\nThời gian dự kiến (MVP) #\rGiai đoạn học và chuẩn bị (1-2 tháng): Người triển khai tự học cơ bản về ML (qua khóa trực tuyến, sách) đồng thời bắt đầu thu thập, khám phá dữ liệu (EDA).\nGiai đoạn phát triển PoC (3-6 tháng): Xây dựng các mô hình đơn giản cho từng mục tiêu nhỏ (ví dụ mô hình dự báo tồn kho hoặc dự đoán lỗi chất lượng) và thử nghiệm trên dữ liệu mẫu. Đánh giá kết quả với chuyên gia nghiệp vụ.\nHoàn thiện MVP (6-12 tháng): Tinh chỉnh mô hình khả thi, tích hợp với hệ thống sản xuất/ERP để có giao diện thử nghiệm. Theo nguyên tắc chung, một MVP đơn giản thường cần khoảng 3–4 tháng, nhưng với dự án ML từ giai đoạn PoC đến triển khai thường kéo dài 10–12 tháng. Vì vậy, mốc thời gian đạt MVP đầu tiên có thể rơi vào khoảng 6–12 tháng tùy độ phức tạp và tiến độ học hỏi.\nHiệu quả dự kiến #\rNâng cao chất lượng và giảm lỗi: ML giúp phát hiện và ngăn ngừa lỗi sản xuất kịp thời. Ví dụ, Toyota sử dụng thị giác máy tính ML để kiểm tra linh kiện, phát hiện lỗi sớm, nhờ đó tăng độ chính xác và giảm chi phí xử lý lỗi. Trong thực tế, Nissan áp dụng AI để phát hiện khuyết tật bề mặt với độ chính xác cao hơn 50% so với kiểm tra thủ công; Tesla thậm chí giảm 90% tỷ lệ lỗi sản phẩm nhờ kiểm tra tự động bằng AI. Nhờ đó, chất lượng sản phẩm được cải thiện rõ rệt và giảm phế phẩm.\nGiảm chi phí sản xuất và bảo trì: Dự đoán sự cố và tối ưu bảo trì giúp giảm thời gian chết máy và chi phí bảo dưỡng. Ví dụ, Bosch áp dụng bảo trì dự đoán và đã giảm thiểu thời gian ngừng máy, kéo dài tuổi thọ thiết bị và tối ưu hóa chi phí vận hành. ML còn giúp tối ưu sử dụng nguyên vật liệu. GM giảm 30% lượng phế liệu vật liệu nhờ lập kế hoạch sản xuất tối ưu hóa sử dụng nguyên liệu. Tổng hợp lại, các biện pháp này sẽ cắt giảm chi phí sản xuất đáng kể.\nTối ưu tồn kho và chuỗi cung ứng: Dự báo nhu cầu chính xác nhờ ML giúp giảm tồn kho dư thừa và tránh thiếu hàng. P\u0026amp;G báo cáo giảm 25% tồn kho nhờ dự báo nhu cầu bằng AI. Tương tự, ML cho phép điều chỉnh sản xuất theo biến động thị trường, giảm lãng phí tồn kho. Một hệ thống dự báo tốt sẽ giúp Fujikin có thể ứng phó kịp thời với sự chuyển dịch nhu cầu khách hàng.\nNhận biết xu hướng khách hàng: Phân tích dữ liệu khách (email, báo cáo bán hàng, truyền thông) bằng NLP cho phép hiểu rõ nhu cầu và thị hiếu. ML có thể phân tích cảm xúc và phản hồi của khách hàng để dự báo xu hướng sản phẩm. Kết quả là công ty có thể điều chỉnh chiến lược sản phẩm, nâng cao tính cạnh tranh và sự hài lòng của khách hàng.\nTóm lại, việc áp dụng ML với giải pháp thực tiễn và công cụ mở sẽ giúp Fujikin cải thiện chất lượng sản xuất, giảm chi phí, quản lý tồn kho hiệu quả và nhanh chóng thích nghi với nhu cầu thị trường. Các lợi ích này đã được các công ty hàng đầu trên thế giới chứng minh. Kế hoạch cần tiến hành theo giai đoạn, ưu tiên các mục tiêu dễ đạt được trước, đảm bảo MVP đầu tiên ra mắt trong khoảng 6–12 tháng và đem lại giá trị ngay cho doanh nghiệp.\n","date":"4 July 2025","externalUrl":null,"permalink":"dohuyhoang93.github.io/posts/detail/","section":"Posts","summary":"","title":"Báo Cáo Kế Hoạch Ứng Dụng Máy Học (ML) Trong Sản Xuất Fujikin","type":"posts"},{"content":"","externalUrl":null,"permalink":"dohuyhoang93.github.io/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"dohuyhoang93.github.io/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"dohuyhoang93.github.io/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"dohuyhoang93.github.io/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]